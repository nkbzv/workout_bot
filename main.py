from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import TOKEN_API
import markups as mu
from db_fuctions import create_connection, add_user_max, add_next_trainings, add_training, get_user_info, get_next_training
from calc_trains import calc_trains
from tabulate import tabulate
import time
import string
import random

HELP_COMMAND = """
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º;
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥."""
GREET_TEXT = '–ü—Ä–∏–≤–µ—Ç! \n–Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏ –º–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - –ø–æ–º–æ—á—å \
—Ç–µ–±–µ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–º –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É. –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è \
—Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π –≤ 200 –æ—Ç–∂–∏–º–∞–Ω–∏–π, 200 —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–π –∏ 10 \
–º–∏–Ω—É—Ç –≤ –ø–ª–∞–Ω–∫–µ. –ú–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∏ —è —Å–æ–∑–¥–∞—é \
–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Ä–∞–∑–≤–∏—Ç—å —Å–∏–ª—É –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å. \
\n–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!'
ABOUT_TEXT = '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ö–æ–±–∑–µ–≤—ã–º –ù–∏–∫–∏—Ç–æ–π @kbzvspb'
COUNT = 0


storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)

class MaxReps(StatesGroup):
    waiting_for_max_reps = State()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(text=GREET_TEXT, parse_mode='HTML', reply_markup = mu.mainMenu)

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer(text=HELP_COMMAND)
    await message.delete()

@dp.message_handler(text=['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def mainmenu_button(message: types.Message):
    await message.answer('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=mu.mainMenu)

@dp.message_handler(text=['üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'])
async def trainmenu_button(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', reply_markup=mu.workoutMenu)

@dp.message_handler(text=['üö∏ –î—Ä—É–≥–æ–µ'])
async def othermenu_button(message: types.Message):
    await message.answer('üö∏ –î—Ä—É–≥–æ–µ', reply_markup=mu.otherMenu)

@dp.message_handler(text=['ü•á 200 pushups', 'ü•à 200 crunches', 'ü•â 10 minute planka'])
async def curtrainmenu_button(message: types.Message, state: FSMContext):
    cur_train = message.text.split()[-1]
    user_id = message.from_user.id
    await state.update_data(cur_train=cur_train, user_id=user_id)
    with create_connection() as conn:
        user_info = get_user_info(conn, user_id, cur_train)
        if "message" in user_info and user_info["max_reps"] == 0:
            await message.answer(user_info["message"])
            await MaxReps.waiting_for_max_reps.set()
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=mu.curtrainMenu)

    @dp.message_handler(text='ü´° –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
    async def start_training(message: types.Message):
        pass

    @dp.message_handler(text='üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
    async def training_history(message: types.Message):
        pass

@dp.message_handler(state=MaxReps.waiting_for_max_reps)
async def max_reps_input(message: types.Message, state: FSMContext):
    data = await state.get_data() 
    user_id = data.get("user_id")
    cur_train = data.get("cur_train")
    
    try:
        max_reps = int(message.text)
        await state.update_data(max_reps=max_reps)
        if max_reps <= 0:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            #await MaxReps.waiting_for_max_reps.set()
        else:
            with create_connection() as conn:
                add_user_max(conn, user_id, cur_train, max_reps)
                time.sleep(2)
                await message.answer(f"–í–∞—à –º–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {max_reps} {cur_train}", reply_markup=mu.curtrainMenu)
                await message.answer('–í–∞–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–∞–Ω –Ω–∞ —Ç—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:')
                data = await state.get_data()
                max_reps = data.get("max_reps")
                trains = calc_trains(max_reps)
                header = ["1", "2", "3"]
                rows = []
                for i, train in enumerate(trains):
                    row_name = f"–ü–æ–¥—Ö–æ–¥ {i+1}"
                    for j, set in enumerate(train):
                        rows.append([row_name] + set)

                table = tabulate(rows, headers=header, tablefmt="pipe")
                await message.answer(table)
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        await MaxReps.waiting_for_max_reps.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

